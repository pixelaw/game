/* Autogenerated file. Do not edit manually. */

import { defineComponent, Type as RecsType, World } from "@latticexyz/recs";

export function defineContractComponents(world: World) {
  return {
	  Alert: (() => {
	    return defineComponent(
	      world,
	      { x: RecsType.Number, y: RecsType.Number, alert: RecsType.Number },
	      {
	        metadata: {
	          name: "Alert",
	          types: [],
	        },
	      }
	    );
	  })(),
	  App: (() => {
	    return defineComponent(
	      world,
	      { system: RecsType.String, name: RecsType.Number, manifest: RecsType.Number, icon: RecsType.Number, action: RecsType.Number },
	      {
	        metadata: {
	          name: "App",
	          types: [],
	        },
	      }
	    );
	  })(),
	  AppName: (() => {
	    return defineComponent(
	      world,
	      { name: RecsType.Number, system: RecsType.String },
	      {
	        metadata: {
	          name: "AppName",
	          types: [],
	        },
	      }
	    );
	  })(),
	  AppUser: (() => {
	    return defineComponent(
	      world,
	      { system: RecsType.String, player: RecsType.String, action: RecsType.Number },
	      {
	        metadata: {
	          name: "AppUser",
	          types: [],
	        },
	      }
	    );
	  })(),
	  CoreActionsAddress: (() => {
	    return defineComponent(
	      world,
	      { key: RecsType.Number, value: RecsType.String },
	      {
	        metadata: {
	          name: "CoreActionsAddress",
	          types: [],
	        },
	      }
	    );
	  })(),
	  Game: (() => {
	    return defineComponent(
	      world,
	      { x: RecsType.Number, y: RecsType.Number, id: RecsType.Number, state: RecsType.Number, player1: RecsType.String, player2: RecsType.String, player1_commit: RecsType.Number, player1_move: RecsType.Number, player2_move: RecsType.Number, started_timestamp: RecsType.Number },
	      {
	        metadata: {
	          name: "Game",
	          types: ["Direction","Direction","Direction"],
	        },
	      }
	    );
	  })(),
	  LastAttempt: (() => {
	    return defineComponent(
	      world,
	      { player: RecsType.String, timestamp: RecsType.Number },
	      {
	        metadata: {
	          name: "LastAttempt",
	          types: [],
	        },
	      }
	    );
	  })(),
	  Permissions: (() => {
	    return defineComponent(
	      world,
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
	      { allowing_app: RecsType.String, allowed_app: RecsType.String, permission: { alert: RecsType.Boolean, app: RecsType.Boolean, color: RecsType.Boolean, owner: RecsType.Boolean, text: RecsType.Boolean, timestamp: RecsType.Boolean, action: RecsType.Boolean } },
	      {
	        metadata: {
	          name: "Permissions",
	          types: ["Permission"],
	        },
	      }
	    );
	  })(),
	  Pixel: (() => {
	    return defineComponent(
	      world,
	      { x: RecsType.Number, y: RecsType.Number, created_at: RecsType.Number, updated_at: RecsType.Number, alert: RecsType.Number, app: RecsType.String, color: RecsType.Number, owner: RecsType.String, text: RecsType.Number, timestamp: RecsType.Number, action: RecsType.Number },
	      {
	        metadata: {
	          name: "Pixel",
	          types: [],
	        },
	      }
	    );
	  })(),
	  Player: (() => {
	    return defineComponent(
	      world,
	      { player_id: RecsType.Number, wins: RecsType.Number },
	      {
	        metadata: {
	          name: "Player",
	          types: [],
	        },
	      }
	    );
	  })(),
	  QueueItem: (() => {
	    return defineComponent(
	      world,
	      { id: RecsType.Number, valid: RecsType.Boolean },
	      {
	        metadata: {
	          name: "QueueItem",
	          types: [],
	        },
	      }
	    );
	  })(),
	  Snake: (() => {
	    return defineComponent(
	      world,
	      { owner: RecsType.String, length: RecsType.Number, first_segment_id: RecsType.Number, last_segment_id: RecsType.Number, direction: RecsType.Number, color: RecsType.Number, text: RecsType.Number, is_dying: RecsType.Boolean },
	      {
	        metadata: {
	          name: "Snake",
	          types: ["Direction"],
	        },
	      }
	    );
	  })(),
	  SnakeSegment: (() => {
	    return defineComponent(
	      world,
	      { id: RecsType.Number, previous_id: RecsType.Number, next_id: RecsType.Number, x: RecsType.Number, y: RecsType.Number, pixel_original_color: RecsType.Number, pixel_original_text: RecsType.Number },
	      {
	        metadata: {
	          name: "SnakeSegment",
	          types: [],
	        },
	      }
	    );
	  })(),
  };
}
